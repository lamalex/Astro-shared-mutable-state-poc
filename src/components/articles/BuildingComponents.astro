---
import FootnoteRef from '../FootnoteRef.astro';
import type { FootnoteRegistry } from '../../lib/footnote-registry';

export interface Props {
  registry: FootnoteRegistry;
}

const { registry } = Astro.props;
---

<article>
  <h1>Building Reusable Components</h1>
  
  <p>
    Creating reusable components is essential for maintainable web applications. Astro<FootnoteRef id="ABC_123" registry={registry} /> provides several patterns for building components that can be shared across your project.
  </p>

  <h2>Astro Components</h2>
  
  <p>
    Astro's native component format combines the power of JSX-like syntax with server-side rendering. Components are rendered at build time, ensuring optimal performance.
  </p>

  <h2>Framework Integration</h2>
  
  <p>
    You can also integrate components from popular frameworks. For example, React components can be hydrated selectively when interactivity is needed.
  </p>

  <h2>Component Props and Slots</h2>
  
  <p>
    Astro supports both props and slots for component composition:
  </p>

  <pre><code>{`---
export interface Props {
  title: string;
  variant?: 'primary' | 'secondary';
}
---`}</code></pre>

  <p>
    This flexibility makes it easy to create component libraries that are both powerful and easy to use<FootnoteRef id="GHI_789" registry={registry} />. 
    The entire development process for this system was demonstrated live<FootnoteRef id="OPENCODE_001" registry={registry} />, 
    and the source code is available<FootnoteRef id="GITHUB_REPO" registry={registry} />.
  </p>
</article>