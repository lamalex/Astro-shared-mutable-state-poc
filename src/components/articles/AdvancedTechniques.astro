---
import FootnoteRef from '../FootnoteRef.astro';
import type { FootnoteRegistry } from '../../lib/footnote-registry';

export interface Props {
  registry: FootnoteRegistry;
}

const { registry } = Astro.props;
---

<article>
  <h1>Advanced Astro Techniques</h1>
  
  <p>
    Once you've mastered the basics of Astro, you can explore more advanced patterns and techniques to build sophisticated web applications.
  </p>

  <h2>Content Collections</h2>
  
  <p>
    Astro's content collections provide a powerful way to manage and query your content. You can define schemas, validate frontmatter, and create type-safe content workflows.
  </p>

  <h2>Server-Side Rendering</h2>
  
  <p>
    While Astro defaults to static site generation, it also supports server-side rendering for dynamic applications<FootnoteRef id="DEF_456" registry={registry} />. This hybrid approach gives you the best of both worlds.
  </p>

  <h2>Performance Optimization</h2>
  
  <p>
    Advanced performance techniques<FootnoteRef id="GHI_789" registry={registry} /> include:
  </p>
  <ul>
    <li>Image optimization with <code>@astrojs/image</code></li>
    <li>Code splitting strategies</li>
    <li>Selective hydration</li>
  </ul>

  <p>
    The framework's architecture makes it easy to optimize for Core Web Vitals and achieve excellent Lighthouse scores.
  </p>
</article>